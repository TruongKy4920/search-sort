#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <unordered_map>




#define MAX 100


std::ifstream input("input.txt");
std::ofstream output("output.txt");


int n, k;
int a[MAX];


void print() {
    for(int i = 0; i < n; i++) {
        std::cout << a[i] << " ";
    }
    std::cout << "\n";
}


void swap(int& x, int& y) {
    int temp = x;
    x = y;
    y = temp;
}


int partition(int start, int end) {
    int pivot_value = a[end];


    int i_small = start-1;
    for(int i = start; i < end; i++) {
        if(a[i] > pivot_value) {
            swap(a[++i_small], a[i]);
        }
    }
    swap(a[i_small+1], a[end]);
    return i_small+1;
}




void quick_sort(int start, int end) { // index a[start], a[end]
    if(start > end) {
        return;
    }

    //Thuật toán sau đây giúp không cần phải sắp xếp hết mảng rồi mới tìm ra tổng,
    //chỉ cần phân ra bên lớn nhỏ và đợi cho thằng quick_sort(start, pivot-1); hoàn thành sort thôi rồi duyệt K
    int pivot = partition(start, end);
    std::cout << start << " " << pivot << " " << end << "\n";
    quick_sort(start, pivot-1); //sắp xếp hoàn chỉnh các phần tử bên trái pivot
    // theo thứ tự giảm dần 
    if(start >= k-1) { //vì đã phân vùng lớn hơn từ 0-> pivot-1, 
            //nên khi đụng bên pivot+1 sẽ bắt đầu cộng K số nguyên dương lại
        int sum = 0;
        for(int i = 0; i < k; i++) sum += a[i];
        std::cout << sum;
        exit(0);
    }
    quick_sort(pivot+1, end);
}


int main() {
    std::cin >> n >> k;
    for(int i = 0; i < n; i++) {
        std::cin >> a[i];
    }


    quick_sort(0, n-1); // O(n logn)
}